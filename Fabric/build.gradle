plugins {
    id 'multiloader-loader'
    id 'fabric-loom'
    id 'net.darkhax.curseforgegradle'
    id 'com.modrinth.minotaur'
}

dependencies {
    minecraft "com.mojang:minecraft:${mc_version}"
    mappings loom.layered {
        officialMojangMappings()
        parchment("org.parchmentmc.data:parchment-${parchment_minecraft}:${parchment_version}@zip")
    }
    modImplementation "net.fabricmc:fabric-loader:${fabric_loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${fabric_version}+${mc_version}"
    implementation("org.reflections:reflections:0.10.2")
    include("org.reflections:reflections:0.10.2")
    implementation("org.javassist:javassist:3.29.2-GA")
    include("org.javassist:javassist:3.29.2-GA")
}

loom {
    def aw = project(':Common').file("src/main/resources/${mod_id}.accesswidener")
    if (aw.exists()) {
        accessWidenerPath.set(aw)
    }

    mixin {
        defaultRefmapName.set("${mod_id}.refmap.json")
    }

    runs {
        client {
            client()
            setConfigName("Fabric Client")
            ideConfigGenerated(true)
            runDir("runs/client")
        }
        server {
            server()
            setConfigName("Fabric Server")
            ideConfigGenerated(true)
            runDir("runs/server")
        }
    }
}

String[] compatibleVersions = project.curseforge_compatible_versions.split(',')
task publishCurseForgeFabric(type: net.darkhax.curseforgegradle.TaskPublishCurseForge) {
    dependsOn(tasks.remapJar)
    apiToken = curseforgeApiKey

    debugMode = debug_publish.toBoolean()

    def mainFile = upload(curseforge_project_id_fabric, tasks.remapJar.archiveFile)
    mainFile.changelogType = 'markdown'
    mainFile.changelog = file("../CHANGELOG.md").exists() ? file("../CHANGELOG.md").text : "No changelog provided"
    mainFile.releaseType = 'release'
    mainFile.addRequirement('fabric-api')
    mainFile.displayName = "[${mc_version}] ${mod_full_name} v${version} (Fabric)"
    compatibleVersions.each { version ->
        mainFile.addGameVersion(version)
    }
}

List compatibleVersionsList = project.curseforge_compatible_versions.split(',')
modrinth {
    token = modrinthToken
    projectId = modrinth_project_id
    versionNumber = version
    versionName = "[${mc_version}] v${version} (Fabric)"
    versionType = "release"
    uploadFile = remapJar
    gameVersions = compatibleVersionsList
    debugMode = debug_publish.toBoolean()
    changelog = file("../CHANGELOG.md").exists() ? file("../CHANGELOG.md").text : "No changelog provided"
    dependencies { // A special DSL for creating dependencies
        // scope.type
        // The scope can be `required`, `optional`, `incompatible`, or `embedded`
        // The type can either be `project` or `version`
        required.project "fabric-api"
    }
}
tasks.modrinth.dependsOn(tasks.remapJar)