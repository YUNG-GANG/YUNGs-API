plugins {
    id 'fabric-loom' version '1.7-SNAPSHOT'
    id 'idea'
    id 'net.darkhax.curseforgegradle' version "${cursegradle_version}"
    id 'com.modrinth.minotaur' version '2.+'
}

def modVersion = version

archivesBaseName = "${mod_name}"
version = "${mc_version}-Fabric-${version}"
group = maven_group

repositories {
    mavenCentral()
    maven { url "https://maven.fabricmc.net" }
}

dependencies {
    minecraft "com.mojang:minecraft:${mc_version}"
    mappings loom.officialMojangMappings()
    modImplementation "net.fabricmc:fabric-loader:${fabric_loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${fabric_version}+${mc_version}"
    implementation("org.reflections:reflections:0.10.2")
    include("org.reflections:reflections:0.10.2")
    implementation("org.javassist:javassist:3.29.2-GA")
    include("org.javassist:javassist:3.29.2-GA")
    implementation group: 'com.google.code.findbugs', name: 'jsr305', version: '3.0.2'
    compileOnly project(":Common")
}

loom {
    mixin.defaultRefmapName = "${mod_id}.refmap.json"

    runs {
        client {
            client()
            setConfigName("Fabric Client")
            ideConfigGenerated(true)
            runDir("run")
        }
        server {
            server()
            setConfigName("Fabric Server")
            ideConfigGenerated(true)
            runDir("run")
        }
    }
}

processResources {
    from project(":Common").sourceSets.main.resources
    inputs.property "version", project.version
    inputs.property "mc_version", project.mc_version
    inputs.property "mod_description", project.mod_description
    inputs.property "mod_full_name", project.mod_full_name
    inputs.property "mod_id", project.mod_id
    inputs.property "fabric_loader_version", project.fabric_loader_version
    inputs.property "fabric_version", project.fabric_version

    filesMatching("fabric.mod.json") {
        expand "version": project.version,
                "mc_version": project.mc_version,
                "mod_description": project.mod_description,
                "mod_full_name": project.mod_full_name,
                "mod_id": project.mod_id,
                "fabric_loader_version": project.fabric_loader_version,
                "fabric_version": project.fabric_version
    }
}

tasks.withType(JavaCompile) {
    source(project(":Common").sourceSets.main.allSource)
}

jar {
    from("LICENSE") {
        rename { "${it}_${mod_name}" }
    }
}

javadoc {
    if (JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}

publishing {
    publications  {
        mavenJava(MavenPublication) {
            artifactId = mod_name
            from components.java
            pom {
                name = "YUNG's API"
                description = "A common API for YUNG's Minecraft mods"
                url = 'https://github.com/yungnickyoung/YUNGs-Api'
                scm {
                    url = 'https://github.com/yungnickyoung/YUNGs-Api'
                    connection = 'scm:git:git://github.com/yungnickyoung/YUNGs-Api.git'
                    developerConnection = 'scm:git:ssh://git@github.com:yungnickyoung/YUNGs-Api.git'
                }
                licenses {
                    license {
                        name = 'GNU LGPLv3'
                        url = 'https://github.com/yungnickyoung/YUNGs-Api/blob/forge/1.18/LICENSE'
                        distribution = 'repo'
                    }
                }
                developers {
                    developer {
                        name = 'YUNGNICKYOUNG'
                        email = 'yungnickyoung@gmail.com'
                    }
                }
            }
        }
    }
    repositories {
        maven {
            url = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
            credentials {
                username ossrhUsername
                password ossrhPassword
            }
        }
    }
}

// signing.keyId, signing.password, and signing.secretKeyRingFile are defined separately
// in my global gradle.properties for protection
signing {
    sign publishing.publications.mavenJava
}

String[] compatibleVersions = project.compatible_versions.split(',')
task publishCurseForgeFabric(type: net.darkhax.curseforgegradle.TaskPublishCurseForge) {
    dependsOn(tasks.remapJar)
    apiToken = curseforgeApiKey

    debugMode = false

    def mainFile = upload(curseforge_project_id_fabric, tasks.remapJar.archiveFile)
    mainFile.changelogType = 'markdown'
    mainFile.changelog = file("../CHANGELOG.md").exists() ? file("../CHANGELOG.md").text : "No changelog provided"
    mainFile.releaseType = 'release'
    mainFile.addRequirement('fabric-api')
    mainFile.displayName = "[${mc_version}] ${mod_full_name} v${modVersion} (Fabric)"
    compatibleVersions.each { version ->
        mainFile.addGameVersion(version)
    }
}

List compatibleVersionsList = project.compatible_versions.split(',')
modrinth {
    token = modrinthToken
    projectId = modrinth_project_id
    versionNumber = version
    versionName = "[${mc_version}] v${modVersion} (Fabric)"
    versionType = "release"
    uploadFile = remapJar
    gameVersions = compatibleVersionsList
    debugMode = false
    changelog = file("../CHANGELOG.md").exists() ? file("../CHANGELOG.md").text : "No changelog provided"
    dependencies { // A special DSL for creating dependencies
        // scope.type
        // The scope can be `required`, `optional`, `incompatible`, or `embedded`
        // The type can either be `project` or `version`
        required.project "fabric-api"
    }
}
tasks.modrinth.dependsOn(tasks.remapJar)